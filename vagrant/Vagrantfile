# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
   

    config.vm.provision "shell", inline: "echo Provisionning 4 RHEL7 machines for ELK"

    config.vm.define "ansible" do |ansible|
        ansible.vm.box = "centos/7"
        ansible.vm.box_check_update = false
        ansible.vm.network "private_network", ip: "192.168.33.50"
        ansible.vm.network "forwarded_port", id: "ssh", host: 20220, guest: 22
        ansible.vm.synced_folder "C:\\vagrant", "/home/vagrant/share", type: "virtualbox", owner: "vagrant",
        group: "vagrant", mount_options: ["dmode=744,fmode=644"]
        ansible.vm.provider "virtualbox" do |vb|
            vb.memory = "1024"
            vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
        end

        ansible.vm.provision "file", source: "./id_rsa.pub", destination: "~/.ssh/id_rsa.pub"
        ansible.vm.provision "file", source: "./id_rsa", destination: "~/.ssh/id_rsa"
        ansible.vm.provision "shell", inline: <<-SHELL
            cat /home/vagrant/.ssh/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys
            chmod 600 /home/vagrant/.ssh/id_rsa
            chmod 600 /home/vagrant/.ssh/id_rsa.pub

            # Add epel repo
            yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

            # Install ansible
            yum -y install ansible
            ansible --version

            # Install git
            yum -y install git

            # Install zip
            yum -y install zip
            yum -y install unzip

            # Update kernel if need to install guest additions for shared folders
            yum -y update kernel
            yum -y install kernel-devel

            # Install python module
            yum -y install python-lxml

        SHELL
    end

    config.vm.define "elastic-1" do |elastic1|
        elastic1.vm.box = "centos/7"
        elastic1.vm.box_check_update = false
        elastic1.vm.network "private_network", ip: "192.168.33.100"
        elastic1.vm.network "forwarded_port", id: "ssh", host: 20221, guest: 22
        elastic1.vm.network "forwarded_port", guest: 9200, host: 9200
        elastic1.vm.network "forwarded_port", guest: 9114, host: 9114
        elastic1.vm.network "forwarded_port", guest: 9090, host: 9090
        elastic1.vm.network "forwarded_port", guest: 9100, host: 9100
        elastic1.vm.provider "virtualbox" do |vb|
            vb.memory = "2048"
            vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
        end

        elastic1.vm.provision "file", source: "./id_rsa.pub", destination: "~/.ssh/ansible.pub"
        elastic1.vm.provision "shell", inline: <<-SHELL
            cat /home/vagrant/.ssh/ansible.pub >> /home/vagrant/.ssh/authorized_keys

            # Enable firewalld
            systemctl disable firewalld
            systemctl stop firewalld

            # Create required directories
            mkdir -p /appli/vagrant/install/vagrant
            mkdir -p /appli/vagrant/tmp
            chown -R vagrant:vagrant /appli/vagrant

        SHELL
    end

    config.vm.define "elastic-2" do |elastic2|
        elastic2.vm.box = "centos/7"
        elastic2.vm.box_check_update = false
        elastic2.vm.network "private_network", ip: "192.168.33.101"
        elastic2.vm.network "forwarded_port", id: "ssh", host: 20222, guest: 22
        elastic2.vm.network "forwarded_port", guest: 5601, host: 5601
        elastic2.vm.network "forwarded_port", guest: 9100, host: 9101
        elastic2.vm.network "forwarded_port", guest: 3000, host: 3000
        elastic2.vm.provider "virtualbox" do |vb|
            vb.memory = "1024"
            vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
        end

        elastic2.vm.provision "file", source: "./id_rsa.pub", destination: "~/.ssh/ansible.pub"
        elastic2.vm.provision "shell", inline: <<-SHELL
            cat /home/vagrant/.ssh/ansible.pub >> /home/vagrant/.ssh/authorized_keys

            # Enable firewalld
            systemctl enable firewalld
            systemctl start firewalld

            # Create required directories
            mkdir -p /appli/vagrant/install/vagrant
            mkdir -p /appli/vagrant/tmp
            chown -R vagrant:vagrant /appli/vagrant

        SHELL
    end

    config.vm.define "elastic-3" do |elastic3|
        elastic3.vm.box = "centos/7"
        elastic3.vm.box_check_update = false
        elastic3.vm.network "private_network", ip: "192.168.33.102"
        elastic3.vm.network "forwarded_port", id: "ssh", host: 20223, guest: 22
        elastic3.vm.provider "virtualbox" do |vb|
            vb.memory = "1024"
            vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
        end

        elastic3.vm.provision "file", source: "./id_rsa.pub", destination: "~/.ssh/ansible.pub"
        elastic3.vm.provision "shell", inline: <<-SHELL
            cat /home/vagrant/.ssh/ansible.pub >> /home/vagrant/.ssh/authorized_keys
        SHELL
    end
  
    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    # config.vm.network "forwarded_port", guest: 80, host: 8080
  
  
    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine and only allow access
    # via 127.0.0.1 to disable public access
    # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  
    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # config.vm.network "private_network", ip: "192.168.33.10"
  
    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"
  
    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"
  
    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    # config.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
    #   vb.memory = "1024"
    # end
    #
    # View the documentation for the provider you are using for more
    # information on available options.
  
  end